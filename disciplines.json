{
	"disciplines": "<h2><strong>Code Barometer:</strong></h2><p data-mce-style=\"font-family: 'Source Sans Pro', sans-serif; color: #ffffff;\" style=\"font-family: 'Source Sans Pro', sans-serif; color: #ffffff;\"><u>Single Responsibility Principle:</u></p><p>A class should only have one reason to change (Swiss-army knife)</p><p data-mce-style=\"font-family: 'Source Sans Pro', sans-serif; color: #ffffff;\" style=\"font-family: 'Source Sans Pro', sans-serif; color: #ffffff;\"><u>Open-Closed Principle:</u></p><ul><li><p>Open for extension, but closed for modification (Hardware store saw blades)<span style=\"font-size: 1em;\">&nbsp;</span></p></li></ul><p data-mce-style=\"font-family: 'Source Sans Pro', sans-serif; color: #ffffff;\" style=\"font-family: 'Source Sans Pro', sans-serif; color: #ffffff;\"><u>Liskov Substitution Principle: (Design by Contract)</u></p><ul><li><p>Replace any instance of a parent class with an instance of one of itâ€™s children without creating any unexpected or incorrect behaviours (Lenovo Laptop Charger)</p></li></ul><p>&nbsp;<u>Interface Segregation:</u></p><ul><li><p>Client should not be forced to depend upon interfaces they do not use (CMS User class and needs Moderator)</p></li></ul><p>&nbsp;<u>Dependency Inversion:</u></p><p>&nbsp;High Level Classes should not depend upon low-level classes. Both should depend upon abstractions (Low-level disk and network IO. High-level business logic)</p>"
}