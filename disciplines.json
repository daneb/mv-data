{
	"disciplines": "<h3 style=\"font-family: &quot;Source Sans Pro&quot;, sans-serif; color: rgb(255, 255, 255);\">Code Barometer:</h3><p></p><h4 style=\"font-family: &quot;Source Sans Pro&quot;, sans-serif; color: rgb(255, 255, 255);\"><u>Single Responsibility Principle:</u></h4><p></p><p>A class should only have one reason to change (Swiss-army knife)</p><p></p><h4 style=\"font-family: &quot;Source Sans Pro&quot;, sans-serif; color: rgb(255, 255, 255);\"><u>Open-Closed Principle:</u></h4><p></p><p></p><ul><li>Open for extension, but closed for modification (Hardware store saw blades)</li></ul><p></p><h4 style=\"font-family: &quot;Source Sans Pro&quot;, sans-serif; color: rgb(255, 255, 255);\"><u>Liskov Substitution Principle:</u></h4><p></p><p></p><ul><li>Replace any instance of a parent class with an instance of one of itâ€™s children without creating any unexpected or incorrect behaviours (Lenovo Laptop Charger)</li></ul><p></p><p>aka, Design by Contract</p><p></p><h4 style=\"font-family: &quot;Source Sans Pro&quot;, sans-serif; color: rgb(255, 255, 255);\"><u>Interface Segregation:</u></h4><p></p><p></p><ul><li>Client should not be forced to depend upon interfaces they do not use (CMS User class and needs Moderator)</li></ul><p></p><p></p><h4 style=\"font-family: &quot;Source Sans Pro&quot;, sans-serif; color: rgb(255, 255, 255);\"><u>Dependency Inversion:</u></h4><p></p><p>High Level Classes should not depend upon low-level classes. Both should depend upon abstractions (Low-level disk and network IO. High-level business logic)</p>"
}